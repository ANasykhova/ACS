     1                                  ;------------------------------------------------------------------------------
     2                                  ; main.asm - содержит главную функцию,
     3                                  ; обеспечивающую простое тестирование
     4                                  ;------------------------------------------------------------------------------
     5                                  ; main.asm
     6                                  
     7                                  global  RECTANGLE
     8                                  global  TRIANGLE
     9                                  global  CIRCLE
    10                                  
    11                                  %include "macros.mac"
     1                              <1> ; macros.mac - файл с макроопределениями
     2                              <1> 
     3                              <1> extern  fopen
     4                              <1> extern  fscanf
     5                              <1> extern  fclose
     6                              <1> extern  fprintf
     7                              <1> extern  printf
     8                              <1> extern  stdout
     9                              <1> extern  time
    10                              <1> extern  srand
    11                              <1> extern  strcmp
    12                              <1> extern  atoi
    13                              <1> extern  clock
    14                              <1> 
    15                              <1> extern  InContainer
    16                              <1> extern  InRndContainer
    17                              <1> extern  OutContainer
    18                              <1> extern  SortContainer
    19                              <1> 
    20                              <1> ;-------------------------------------------------------------
    21                              <1> ; Вывод строки символов из буфера
    22                              <1> %macro	PrintStrBuf 2
    23                              <1>         mov rdi, %2
    24                              <1>         mov rsi, %1
    25                              <1>         xor rax, rax
    26                              <1>         call fprintf
    27                              <1> %endmacro
    28                              <1> 
    29                              <1> ;-------------------------------------------------------------
    30                              <1> ; Вывод строки, передаваемой непосредственно макросу
    31                              <1> %macro  PrintStr    2
    32                              <1>     section .data
    33                              <1>         %%arg1  db  %1,0        ; first argument
    34                              <1>     section .text               ; the printf arguments
    35                              <1>         mov rdi, %2
    36                              <1>         mov rsi, %%arg1
    37                              <1>         mov rax, 0              ; no floating point
    38                              <1>         call fprintf
    39                              <1> %endmacro
    40                              <1> 
    41                              <1> ;-------------------------------------------------------------
    42                              <1> ; Вывод строки, передаваемой непосредственно макросу
    43                              <1> ; с переводом на следующую строку
    44                              <1> %macro  PrintStrLn    2
    45                              <1>     section .data
    46                              <1>         %%arg1  db  %1,10,0     ; first argument
    47                              <1>     section .text               ; the printf arguments
    48                              <1>         mov rdi, %2
    49                              <1>         mov rsi, %%arg1
    50                              <1>         mov rax, 0              ; no floating point
    51                              <1>         call fprintf
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> ;-------------------------------------------------------------
    55                              <1> ; Вывод целого числа
    56                              <1> %macro  PrintInt    2
    57                              <1>     section .data
    58                              <1>         %%arg1  db  "%d",0     ; first argument
    59                              <1>     section .text               ; the printf arguments
    60                              <1>         mov rdi, %2
    61                              <1>         mov rsi, %%arg1
    62                              <1>         mov rdx, %1
    63                              <1>         mov rax, 0              ; no floating point
    64                              <1>         call fprintf
    65                              <1> %endmacro
    66                              <1> 
    67                              <1> ;-------------------------------------------------------------
    68                              <1> ; Вывод 64-разрядного беззнакового целого числа
    69                              <1> %macro  PrintLLUns    2
    70                              <1>     section .data
    71                              <1>         %%arg1  db  "%llu",0     ; first argument
    72                              <1>     section .text               ; the printf arguments
    73                              <1>         mov rdi, %2
    74                              <1>         mov rsi, %%arg1
    75                              <1>         mov rdx, %1
    76                              <1>         mov rax, 0              ; no floating point
    77                              <1>         call fprintf
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> ;-------------------------------------------------------------
    81                              <1> ; Вывод действительного числа двойной точности
    82                              <1> %macro  PrintDouble    2
    83                              <1>     section .data
    84                              <1>         %%arg1  db  "%lg",0     ; first argument
    85                              <1>     section .text               ; the printf arguments
    86                              <1>         mov rdi, %2
    87                              <1>         mov rsi, %%arg1
    88                              <1>         movsd xmm0, %1
    89                              <1>         mov rax, 1              ; no floating point
    90                              <1>         call fprintf
    91                              <1> %endmacro
    92                              <1> 
    93                              <1> ;-------------------------------------------------------------
    94                              <1> ; Вывод содержимого контейнера
    95                              <1> %macro  PrintContainer    3
    96                              <1>     mov     rdi, %1
    97                              <1>     mov     esi, %2
    98                              <1>     mov     rdx, %3
    99                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   100                              <1>     call    OutContainer
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> ;-------------------------------------------------------------
   104                              <1> ; Вывод содержимого контейнера
   105                              <1> %macro  ContainerSort   2
   106                              <1>     mov     rdi, %1
   107                              <1>     mov     esi, %2
   108                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   109                              <1>     call    SortContainer
   110                              <1> %endmacro
   111                              <1> 
   112                              <1> 
   113                              <1> ;-------------------------------------------------------------
   114                              <1> ; Открытие файла для чтения, записи
   115                              <1> %macro  FileOpen   3
   116                              <1>     section .data
   117                              <1>         %%rw  db  %2,0          ; признак доступа
   118                              <1>     section .text               ; the printf arguments
   119                              <1>         mov     rdi, %1         ; адрес строки открываемого файла
   120                              <1>         mov     rsi, %%rw       ; строка определяющая чтение-запись. Задается явно
   121                              <1>         ; Или аналог:
   122                              <1>         ;lea     rsi, [%%rw]    ; строка определяющая чтение-запись. Задается явно
   123                              <1>         mov     rax, 0          ; нет чисел с плавающей точкой
   124                              <1>         call    fopen
   125                              <1>         mov     [%3], rax
   126                              <1> %endmacro
   127                              <1> 
   128                              <1> ;-------------------------------------------------------------
   129                              <1> ; Закрытие открытого файла
   130                              <1> %macro  FileClose   1
   131                              <1>     mov     rdi, %1             ; передача указателя на закрываемый файл
   132                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   133                              <1>     call    fclose
   134                              <1> %endmacro
   135                              <1> 
    12                                  
    13                                  section .data
    14 00000000 01000000                    RECTANGLE   dd  1
    15 00000004 02000000                    TRIANGLE    dd  2
    16 00000008 03000000                    CIRCLE      dd  3
    17 0000000C 000000000000F03F            oneDouble   dq  1.0
    18 00000014 496E636F7272656374-         erMsg1  db "Incorrect number of arguments = %d: ",10,0
    18 0000001D 206E756D626572206F-
    18 00000026 6620617267756D656E-
    18 0000002F 7473203D2025643A20-
    18 00000038 0A00               
    19 0000003A 2D6E00                      rndGen  db "-n",0
    20 0000003D 2D6600                      fileGen  db "-f",0
    21 00000040 696E636F7272656374-         errMessage1 db  "incorrect command line!", 10,"  Waited:",10
    21 00000049 20636F6D6D616E6420-
    21 00000052 6C696E65210A202057-
    21 0000005B 61697465643A0A     
    22 00000062 2020202020636F6D6D-                     db  "     command -f infile outfile01 outfile02",10,"  Or:",10
    22 0000006B 616E64202D6620696E-
    22 00000074 66696C65206F757466-
    22 0000007D 696C653031206F7574-
    22 00000086 66696C6530320A2020-
    22 0000008F 4F723A0A           
    23 00000093 2020202020636F6D6D-                     db  "     command -n number outfile01 outfile02",10,0
    23 0000009C 616E64202D6E206E75-
    23 000000A5 6D626572206F757466-
    23 000000AE 696C653031206F7574-
    23 000000B7 66696C6530320A00   
    24 000000BF 696E636F7272656374-         errMessage2 db  "incorrect qualifier value!", 10,"  Waited:",10
    24 000000C8 207175616C69666965-
    24 000000D1 722076616C7565210A-
    24 000000DA 20205761697465643A-
    24 000000E3 0A                 
    25 000000E4 2020202020636F6D6D-                     db  "     command -f infile outfile01 outfile02",10,"  Or:",10
    25 000000ED 616E64202D6620696E-
    25 000000F6 66696C65206F757466-
    25 000000FF 696C653031206F7574-
    25 00000108 66696C6530320A2020-
    25 00000111 4F723A0A           
    26 00000115 2020202020636F6D6D-                     db  "     command -n number outfile01 outfile02",10,0
    26 0000011E 616E64202D6E206E75-
    26 00000127 6D626572206F757466-
    26 00000130 696C653031206F7574-
    26 00000139 66696C6530320A00   
    27 00000141 00000000                    len         dd  0           ; Количество элементов в массиве
    28                                  section .bss
    29 00000000 <res 00000004>              argc        resd    1
    30 00000004 <res 00000004>              num         resd    1
    31 00000008 <res 00000008>              start       resq    1       ; начало отсчета времени
    32 00000010 <res 00000008>              delta       resq    1       ; интервал отсчета времени
    33 00000018 <res 00000010>              startTime   resq    2       ; начало отсчета времени
    34 00000028 <res 00000010>              endTime     resq    2       ; конец отсчета времени
    35 00000038 <res 00000010>              deltaTime   resq    2       ; интервал отсчета времени
    36 00000048 <res 00000008>              ifst        resq    1       ; указатель на файл, открываемый файл для чтения фигур
    37 00000050 <res 00000008>              ofst1       resq    1       ; указатель на файл, открываемый файл для записи контейнера
    38 00000058 <res 00000008>              ofst2       resq    1       ; указатель на файл, открываемый файл для записи после сортировки
    39 00000060 <res 00027100>              cont        resb    160000  ; Массив используемый для хранения данных
    40                                  
    41                                  section .text
    42                                      global main
    43                                  main:
    44 00000000 55                      push rbp
    45 00000001 4889E5                  mov rbp,rsp
    46                                  
    47 00000004 893C25[00000000]            mov dword [argc], edi ;rdi contains number of arguments
    48 0000000B 4989FC                      mov r12, rdi          ;rdi contains number of arguments
    49 0000000E 4989F5                      mov r13, rsi          ;rsi contains the address to the array of arguments
    50                                  
    51                                  .printArguments:
    52                                      PrintStrLn "The command and arguments:", [stdout]
    52                              <1>  section .data
    52 00000145 54686520636F6D6D61- <1>  %%arg1 db %1,10,0
    52 0000014E 6E6420616E64206172- <1>
    52 00000157 67756D656E74733A0A- <1>
    52 00000160 00                  <1>
    52                              <1>  section .text
    52 00000011 488B3C25[00000000]  <1>  mov rdi, %2
    52 00000019 48BE-               <1>  mov rsi, %%arg1
    52 0000001B [4501000000000000]  <1>
    52 00000023 B800000000          <1>  mov rax, 0
    52 00000028 E8(00000000)        <1>  call fprintf
    53 0000002D BB00000000                  mov rbx, 0
    54                                  .printLoop:
    55                                      PrintStrBuf qword [r13+rbx*8], [stdout]
    55 00000032 488B3C25[00000000]  <1>  mov rdi, %2
    55 0000003A 498B74DD00          <1>  mov rsi, %1
    55 0000003F 4831C0              <1>  xor rax, rax
    55 00000042 E8(00000000)        <1>  call fprintf
    56                                      PrintStr    10, [stdout]
    56                              <1>  section .data
    56 00000161 0A00                <1>  %%arg1 db %1,0
    56                              <1>  section .text
    56 00000047 488B3C25[00000000]  <1>  mov rdi, %2
    56 0000004F 48BE-               <1>  mov rsi, %%arg1
    56 00000051 [6101000000000000]  <1>
    56 00000059 B800000000          <1>  mov rax, 0
    56 0000005E E8(00000000)        <1>  call fprintf
    57 00000063 48FFC3                      inc rbx
    58 00000066 4C39E3                      cmp rbx, r12
    59 00000069 7CC7                        jl .printLoop
    60                                  
    61 0000006B 4983FC05                    cmp r12, 5      ; проверка количества аргументов
    62 0000006F 741F                        je .next1
    63                                      PrintStrBuf errMessage1, [stdout]
    63 00000071 488B3C25[00000000]  <1>  mov rdi, %2
    63 00000079 48BE-               <1>  mov rsi, %1
    63 0000007B [4000000000000000]  <1>
    63 00000083 4831C0              <1>  xor rax, rax
    63 00000086 E8(00000000)        <1>  call fprintf
    64 0000008B E964040000                  jmp .return
    65                                  .next1:
    66                                      PrintStrLn "Start", [stdout]
    66                              <1>  section .data
    66 00000163 53746172740A00      <1>  %%arg1 db %1,10,0
    66                              <1>  section .text
    66 00000090 488B3C25[00000000]  <1>  mov rdi, %2
    66 00000098 48BE-               <1>  mov rsi, %%arg1
    66 0000009A [6301000000000000]  <1>
    66 000000A2 B800000000          <1>  mov rax, 0
    66 000000A7 E8(00000000)        <1>  call fprintf
    67                                      ; Проверка второго аргумента
    68 000000AC 48BF-                       mov rdi, rndGen     ; признак для сравнения
    68 000000AE [3A00000000000000] 
    69 000000B6 498B7508                    mov rsi, [r13+8]    ; второй аргумент командной строки
    70 000000BA B903000000                  mov rcx, 3          ; сравнение, включая нуль (обе строки завершились)
    71 000000BF FC                          cld                 ; обнуление флага направления (инкремент)
    72 000000C0 F3A6                        repe cmpsb
    73                                      ;;call strcmp
    74                                      ;;cmp rax, 0        ; строки равны "-n"
    75 000000C2 743C                        je .next2
    76 000000C4 48BF-                       mov rdi, fileGen
    76 000000C6 [3D00000000000000] 
    77 000000CE 498B7508                    mov rsi, [r13+8]    ; второй аргумент командной строки
    78                                      ;;mov rcx, 3        ; сравнение, включая нуль (обе строки завершились)
    79                                      ;;cld               ; обнуление флага направления (инкремент)
    80                                      ;;repe cmpsb
    81 000000D2 E8(00000000)                call strcmp
    82 000000D7 4883F800                    cmp rax, 0          ; строки равны "-f"
    83 000000DB 0F84C2000000                je .next3
    84                                      PrintStrBuf errMessage2, [stdout]
    84 000000E1 488B3C25[00000000]  <1>  mov rdi, %2
    84 000000E9 48BE-               <1>  mov rsi, %1
    84 000000EB [BF00000000000000]  <1>
    84 000000F3 4831C0              <1>  xor rax, rax
    84 000000F6 E8(00000000)        <1>  call fprintf
    85 000000FB E9F4030000                  jmp .return
    86                                  
    87                                  .next2:
    88                                      ; Генерация случайных фигур
    89 00000100 498B7D10                    mov rdi, [r13+16]
    90 00000104 E8(00000000)                call atoi
    91 00000109 890425[04000000]            mov [num], eax
    92                                      PrintInt [num], [stdout]
    92                              <1>  section .data
    92 0000016A 256400              <1>  %%arg1 db "%d",0
    92                              <1>  section .text
    92 00000110 488B3C25[00000000]  <1>  mov rdi, %2
    92 00000118 48BE-               <1>  mov rsi, %%arg1
    92 0000011A [6A01000000000000]  <1>
    92 00000122 488B1425[04000000]  <1>  mov rdx, %1
    92 0000012A B800000000          <1>  mov rax, 0
    92 0000012F E8(00000000)        <1>  call fprintf
    93                                      PrintStrLn "", [stdout]
    93                              <1>  section .data
    93 0000016D 0A00                <1>  %%arg1 db %1,10,0
    93                              <1>  section .text
    93 00000134 488B3C25[00000000]  <1>  mov rdi, %2
    93 0000013C 48BE-               <1>  mov rsi, %%arg1
    93 0000013E [6D01000000000000]  <1>
    93 00000146 B800000000          <1>  mov rax, 0
    93 0000014B E8(00000000)        <1>  call fprintf
    94 00000150 8B0425[04000000]            mov eax, [num]
    95 00000157 83F801                      cmp eax, 1
    96 0000015A 0F8C38030000                jl .fall1
    97 00000160 3D10270000                  cmp eax, 10000
    98 00000165 0F8F2D030000                jg .fall1
    99                                      ; Начальная установка генератора случайных чисел
   100 0000016B 4831FF                      xor     rdi, rdi
   101 0000016E 4831C0                      xor     rax, rax
   102 00000171 E8(00000000)                call    time
   103 00000176 4889C7                      mov     rdi, rax
   104 00000179 4831C0                      xor     rax, rax
   105 0000017C E8(00000000)                call    srand
   106                                      ; Заполнение контейнера случайными фигурами
   107 00000181 48BF-                       mov     rdi, cont   ; передача адреса контейнера
   107 00000183 [6000000000000000] 
   108 0000018B 48BE-                       mov     rsi, len    ; передача адреса для длины
   108 0000018D [4101000000000000] 
   109 00000195 8B1425[04000000]            mov     edx, [num]  ; передача количества порождаемых фигур
   110 0000019C E8(00000000)                call    InRndContainer
   111 000001A1 EB56                        jmp .task2
   112                                  
   113                                  .next3:
   114                                      ; Получение фигур из файла
   115                                      FileOpen [r13+16], "r", ifst
   115                              <1>  section .data
   115 0000016F 7200                <1>  %%rw db %2,0
   115                              <1>  section .text
   115 000001A3 498B7D10            <1>  mov rdi, %1
   115 000001A7 48BE-               <1>  mov rsi, %%rw
   115 000001A9 [6F01000000000000]  <1>
   115                              <1> 
   115                              <1> 
   115 000001B1 B800000000          <1>  mov rax, 0
   115 000001B6 E8(00000000)        <1>  call fopen
   115 000001BB 48890425[48000000]  <1>  mov [%3], rax
   116                                      ; Заполнение контейнера фигурами из файла
   117 000001C3 48BF-                       mov     rdi, cont           ; адрес контейнера
   117 000001C5 [6000000000000000] 
   118 000001CD 48BE-                       mov     rsi, len            ; адрес для установки числа элементов
   118 000001CF [4101000000000000] 
   119 000001D7 488B1425[48000000]          mov     rdx, [ifst]         ; указатель на файл
   120 000001DF 4831C0                      xor     rax, rax
   121 000001E2 E8(00000000)                call    InContainer         ; ввод данных в контейнер
   122                                      FileClose [ifst]
   122 000001E7 488B3C25[48000000]  <1>  mov rdi, %1
   122 000001EF B800000000          <1>  mov rax, 0
   122 000001F4 E8(00000000)        <1>  call fclose
   123                                  
   124                                  .task2:
   125                                      ; Вывод содержимого контейнера
   126                                      PrintStrLn "Filled container:", [stdout]
   126                              <1>  section .data
   126 00000171 46696C6C656420636F- <1>  %%arg1 db %1,10,0
   126 0000017A 6E7461696E65723A0A- <1>
   126 00000183 00                  <1>
   126                              <1>  section .text
   126 000001F9 488B3C25[00000000]  <1>  mov rdi, %2
   126 00000201 48BE-               <1>  mov rsi, %%arg1
   126 00000203 [7101000000000000]  <1>
   126 0000020B B800000000          <1>  mov rax, 0
   126 00000210 E8(00000000)        <1>  call fprintf
   127                                      PrintContainer cont, [len], [stdout]
   127 00000215 48BF-               <1>  mov rdi, %1
   127 00000217 [6000000000000000]  <1>
   127 0000021F 8B3425[41010000]    <1>  mov esi, %2
   127 00000226 488B1425[00000000]  <1>  mov rdx, %3
   127 0000022E B800000000          <1>  mov rax, 0
   127 00000233 E8(00000000)        <1>  call OutContainer
   128                                  
   129                                      FileOpen [r13+24], "w", ofst1
   129                              <1>  section .data
   129 00000184 7700                <1>  %%rw db %2,0
   129                              <1>  section .text
   129 00000238 498B7D18            <1>  mov rdi, %1
   129 0000023C 48BE-               <1>  mov rsi, %%rw
   129 0000023E [8401000000000000]  <1>
   129                              <1> 
   129                              <1> 
   129 00000246 B800000000          <1>  mov rax, 0
   129 0000024B E8(00000000)        <1>  call fopen
   129 00000250 48890425[50000000]  <1>  mov [%3], rax
   130                                      PrintStrLn "Filled container:", [ofst1]
   130                              <1>  section .data
   130 00000186 46696C6C656420636F- <1>  %%arg1 db %1,10,0
   130 0000018F 6E7461696E65723A0A- <1>
   130 00000198 00                  <1>
   130                              <1>  section .text
   130 00000258 488B3C25[50000000]  <1>  mov rdi, %2
   130 00000260 48BE-               <1>  mov rsi, %%arg1
   130 00000262 [8601000000000000]  <1>
   130 0000026A B800000000          <1>  mov rax, 0
   130 0000026F E8(00000000)        <1>  call fprintf
   131                                      PrintContainer cont, [len], [ofst1]
   131 00000274 48BF-               <1>  mov rdi, %1
   131 00000276 [6000000000000000]  <1>
   131 0000027E 8B3425[41010000]    <1>  mov esi, %2
   131 00000285 488B1425[50000000]  <1>  mov rdx, %3
   131 0000028D B800000000          <1>  mov rax, 0
   131 00000292 E8(00000000)        <1>  call OutContainer
   132                                      FileClose [ofst1]
   132 00000297 488B3C25[50000000]  <1>  mov rdi, %1
   132 0000029F B800000000          <1>  mov rax, 0
   132 000002A4 E8(00000000)        <1>  call fclose
   133                                  
   134                                      ; Вычисление времени старта
   135 000002A9 B8E4000000                  mov rax, 228   ; 228 is system call for sys_clock_gettime
   136 000002AE 31FF                        xor edi, edi   ; 0 for system clock (preferred over "mov rdi, 0")
   137 000002B0 488D3425[18000000]          lea rsi, [startTime]
   138 000002B8 0F05                        syscall        ; [time] contains number of seconds
   139                                                     ; [time + 8] contains number of nanoseconds
   140                                      
   141                                      ;ContainerSort cont, [len]
   142                                      
   143                                  
   144                                      ; Вычисление времени завершения
   145 000002BA B8E4000000                  mov rax, 228   ; 228 is system call for sys_clock_gettime
   146 000002BF 31FF                        xor edi, edi   ; 0 for system clock (preferred over "mov rdi, 0")
   147 000002C1 488D3425[28000000]          lea rsi, [endTime]
   148 000002C9 0F05                        syscall        ; [time] contains number of seconds
   149                                                     ; [time + 8] contains number of nanoseconds
   150                                  
   151                                      ; Получение времени работы
   152 000002CB 488B0425[28000000]          mov rax, [endTime]
   153 000002D3 482B0425[18000000]          sub rax, [startTime]
   154 000002DB 488B1C25[30000000]          mov rbx, [endTime+8]
   155 000002E3 488B0C25[20000000]          mov rcx, [startTime+8]
   156 000002EB 4839CB                      cmp rbx, rcx
   157 000002EE 7D0A                        jge .subNanoOnly
   158                                      ; иначе занимаем секунду
   159 000002F0 48FFC8                      dec rax
   160 000002F3 4881C300CA9A3B              add rbx, 1000000000
   161                                  .subNanoOnly:
   162 000002FA 482B1C25[20000000]          sub rbx, [startTime+8]
   163 00000302 48890425[38000000]          mov [deltaTime], rax
   164 0000030A 48891C25[40000000]          mov [deltaTime+8], rbx
   165                                  
   166                                      ; Вывод периметра нескольких фигур
   167                                      PrintStr "Calculaton time = ", [stdout]
   167                              <1>  section .data
   167 00000199 43616C63756C61746F- <1>  %%arg1 db %1,0
   167 000001A2 6E2074696D65203D20- <1>
   167 000001AB 00                  <1>
   167                              <1>  section .text
   167 00000312 488B3C25[00000000]  <1>  mov rdi, %2
   167 0000031A 48BE-               <1>  mov rsi, %%arg1
   167 0000031C [9901000000000000]  <1>
   167 00000324 B800000000          <1>  mov rax, 0
   167 00000329 E8(00000000)        <1>  call fprintf
   168                                      PrintLLUns [deltaTime], [stdout]
   168                              <1>  section .data
   168 000001AC 256C6C7500          <1>  %%arg1 db "%llu",0
   168                              <1>  section .text
   168 0000032E 488B3C25[00000000]  <1>  mov rdi, %2
   168 00000336 48BE-               <1>  mov rsi, %%arg1
   168 00000338 [AC01000000000000]  <1>
   168 00000340 488B1425[38000000]  <1>  mov rdx, %1
   168 00000348 B800000000          <1>  mov rax, 0
   168 0000034D E8(00000000)        <1>  call fprintf
   169                                      PrintStr " sec, ", [stdout]
   169                              <1>  section .data
   169 000001B1 207365632C2000      <1>  %%arg1 db %1,0
   169                              <1>  section .text
   169 00000352 488B3C25[00000000]  <1>  mov rdi, %2
   169 0000035A 48BE-               <1>  mov rsi, %%arg1
   169 0000035C [B101000000000000]  <1>
   169 00000364 B800000000          <1>  mov rax, 0
   169 00000369 E8(00000000)        <1>  call fprintf
   170                                      PrintLLUns [deltaTime+8], [stdout]
   170                              <1>  section .data
   170 000001B8 256C6C7500          <1>  %%arg1 db "%llu",0
   170                              <1>  section .text
   170 0000036E 488B3C25[00000000]  <1>  mov rdi, %2
   170 00000376 48BE-               <1>  mov rsi, %%arg1
   170 00000378 [B801000000000000]  <1>
   170 00000380 488B1425[40000000]  <1>  mov rdx, %1
   170 00000388 B800000000          <1>  mov rax, 0
   170 0000038D E8(00000000)        <1>  call fprintf
   171                                      PrintStr " nsec", [stdout]
   171                              <1>  section .data
   171 000001BD 206E73656300        <1>  %%arg1 db %1,0
   171                              <1>  section .text
   171 00000392 488B3C25[00000000]  <1>  mov rdi, %2
   171 0000039A 48BE-               <1>  mov rsi, %%arg1
   171 0000039C [BD01000000000000]  <1>
   171 000003A4 B800000000          <1>  mov rax, 0
   171 000003A9 E8(00000000)        <1>  call fprintf
   172                                      PrintStr 10, [stdout]
   172                              <1>  section .data
   172 000001C3 0A00                <1>  %%arg1 db %1,0
   172                              <1>  section .text
   172 000003AE 488B3C25[00000000]  <1>  mov rdi, %2
   172 000003B6 48BE-               <1>  mov rsi, %%arg1
   172 000003B8 [C301000000000000]  <1>
   172 000003C0 B800000000          <1>  mov rax, 0
   172 000003C5 E8(00000000)        <1>  call fprintf
   173                                  
   174                                      PrintStrLn "Filled container:", [stdout]
   174                              <1>  section .data
   174 000001C5 46696C6C656420636F- <1>  %%arg1 db %1,10,0
   174 000001CE 6E7461696E65723A0A- <1>
   174 000001D7 00                  <1>
   174                              <1>  section .text
   174 000003CA 488B3C25[00000000]  <1>  mov rdi, %2
   174 000003D2 48BE-               <1>  mov rsi, %%arg1
   174 000003D4 [C501000000000000]  <1>
   174 000003DC B800000000          <1>  mov rax, 0
   174 000003E1 E8(00000000)        <1>  call fprintf
   175                                      PrintContainer cont, [len], [stdout]
   175 000003E6 48BF-               <1>  mov rdi, %1
   175 000003E8 [6000000000000000]  <1>
   175 000003F0 8B3425[41010000]    <1>  mov esi, %2
   175 000003F7 488B1425[00000000]  <1>  mov rdx, %3
   175 000003FF B800000000          <1>  mov rax, 0
   175 00000404 E8(00000000)        <1>  call OutContainer
   176                                  
   177                                      FileOpen [r13+24], "w", ofst2
   177                              <1>  section .data
   177 000001D8 7700                <1>  %%rw db %2,0
   177                              <1>  section .text
   177 00000409 498B7D18            <1>  mov rdi, %1
   177 0000040D 48BE-               <1>  mov rsi, %%rw
   177 0000040F [D801000000000000]  <1>
   177                              <1> 
   177                              <1> 
   177 00000417 B800000000          <1>  mov rax, 0
   177 0000041C E8(00000000)        <1>  call fopen
   177 00000421 48890425[58000000]  <1>  mov [%3], rax
   178                                      PrintStrLn "Filled container:", [ofst2]
   178                              <1>  section .data
   178 000001DA 46696C6C656420636F- <1>  %%arg1 db %1,10,0
   178 000001E3 6E7461696E65723A0A- <1>
   178 000001EC 00                  <1>
   178                              <1>  section .text
   178 00000429 488B3C25[58000000]  <1>  mov rdi, %2
   178 00000431 48BE-               <1>  mov rsi, %%arg1
   178 00000433 [DA01000000000000]  <1>
   178 0000043B B800000000          <1>  mov rax, 0
   178 00000440 E8(00000000)        <1>  call fprintf
   179                                      PrintContainer cont, [len], [ofst2]
   179 00000445 48BF-               <1>  mov rdi, %1
   179 00000447 [6000000000000000]  <1>
   179 0000044F 8B3425[41010000]    <1>  mov esi, %2
   179 00000456 488B1425[58000000]  <1>  mov rdx, %3
   179 0000045E B800000000          <1>  mov rax, 0
   179 00000463 E8(00000000)        <1>  call OutContainer
   180                                      FileClose [ofst2]
   180 00000468 488B3C25[58000000]  <1>  mov rdi, %1
   180 00000470 B800000000          <1>  mov rax, 0
   180 00000475 E8(00000000)        <1>  call fclose
   181                                  
   182                                      PrintStrLn "Stop", [stdout]
   182                              <1>  section .data
   182 000001ED 53746F700A00        <1>  %%arg1 db %1,10,0
   182                              <1>  section .text
   182 0000047A 488B3C25[00000000]  <1>  mov rdi, %2
   182 00000482 48BE-               <1>  mov rsi, %%arg1
   182 00000484 [ED01000000000000]  <1>
   182 0000048C B800000000          <1>  mov rax, 0
   182 00000491 E8(00000000)        <1>  call fprintf
   183 00000496 EB5C                        jmp .return
   184                                  
   185                                  .fall1:
   186                                      PrintStr "incorrect numer of figures = ", [stdout]
   186                              <1>  section .data
   186 000001F3 696E636F7272656374- <1>  %%arg1 db %1,0
   186 000001FC 206E756D6572206F66- <1>
   186 00000205 206669677572657320- <1>
   186 0000020E 3D2000              <1>
   186                              <1>  section .text
   186 00000498 488B3C25[00000000]  <1>  mov rdi, %2
   186 000004A0 48BE-               <1>  mov rsi, %%arg1
   186 000004A2 [F301000000000000]  <1>
   186 000004AA B800000000          <1>  mov rax, 0
   186 000004AF E8(00000000)        <1>  call fprintf
   187                                      PrintInt [num], [stdout]
   187                              <1>  section .data
   187 00000211 256400              <1>  %%arg1 db "%d",0
   187                              <1>  section .text
   187 000004B4 488B3C25[00000000]  <1>  mov rdi, %2
   187 000004BC 48BE-               <1>  mov rsi, %%arg1
   187 000004BE [1102000000000000]  <1>
   187 000004C6 488B1425[04000000]  <1>  mov rdx, %1
   187 000004CE B800000000          <1>  mov rax, 0
   187 000004D3 E8(00000000)        <1>  call fprintf
   188                                      PrintStrLn ". Set 0 < number <= 10000", [stdout]
   188                              <1>  section .data
   188 00000214 2E205365742030203C- <1>  %%arg1 db %1,10,0
   188 0000021D 206E756D626572203C- <1>
   188 00000226 3D2031303030300A00  <1>
   188                              <1>  section .text
   188 000004D8 488B3C25[00000000]  <1>  mov rdi, %2
   188 000004E0 48BE-               <1>  mov rsi, %%arg1
   188 000004E2 [1402000000000000]  <1>
   188 000004EA B800000000          <1>  mov rax, 0
   188 000004EF E8(00000000)        <1>  call fprintf
   189                                  .return:
   190 000004F4 C9                      leave
   191 000004F5 C3                      ret
